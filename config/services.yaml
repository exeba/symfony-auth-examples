# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    locale: 'en'
    # This parameter defines the codes of the locales (languages) enabled in the application
    app_locales: ar|en|fr|de|es|cs|nl|ru|uk|ro|pt_BR|pl|it|ja|id|ca|sl|hr|zh_CN|bg|tr|lt|bs|sr_Cyrl|sr_Latn
    app.notifications.email_sender: anonymous@example.com

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:               # defines the scalar arguments once and apply them to any service defined/created in this file
            string $locales: '%app_locales%'
            string $defaultLocale: '%locale%'
            string $emailSender: '%app.notifications.email_sender%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # when the service definition only contains arguments, you can omit the
    # 'arguments' key and define the arguments just below the service class
    App\EventSubscriber\CommentNotificationSubscriber:
        $sender: '%app.notifications.email_sender%'

    Symfony\Component\Security\Http\Logout\LogoutUrlGenerator: '@security.logout_url_generator'

    Seb\AuthenticatorBundle\Security\Policies\CreateUserIfAuthSucceeds:
        arguments:
            $userManager: '@App\Repository\UserRepository'
    Seb\AuthenticatorBundle\Security\CredentialsProviders\FormCredentialsProvider:
        arguments:
            $options:
                login_path: 'security_login'
                login_check_path: 'security_login'

    Seb\AuthenticatorBundle\Security\CredentialsCheckers\LocalCredentialsChecker: ~
    Seb\AuthenticatorBundle\Security\Authenticator\PassportProvider:
        arguments:
            $credentialsChecker: '@Seb\AuthenticatorBundle\Security\CredentialsCheckers\LocalCredentialsChecker'
            $missingUserPolicy: '@Seb\AuthenticatorBundle\Security\Policies\CreateUserIfAuthSucceeds'

    Seb\AuthenticatorBundle\Security\Authenticator\SimpleAuthenticatedTokenProvider: ~
    Seb\AuthenticatorBundle\Security\Policies\TargetPathOrHomePageRedirect: ~
    Seb\AuthenticatorBundle\Security\Policies\RedirectOnBadCredentials:
        arguments:
            $redirectRoute: 'failed_login'

    custom_authenticator:
        class: 'Seb\AuthenticatorBundle\Security\Authenticator\Authenticator'
        arguments:
            $credentialsProvider: '@Seb\AuthenticatorBundle\Security\CredentialsProviders\FormCredentialsProvider'
            $passportProvider: '@Seb\AuthenticatorBundle\Security\Authenticator\PassportProvider'
            $authenticatedTokenProvider: '@Seb\AuthenticatorBundle\Security\Authenticator\SimpleAuthenticatedTokenProvider'
            $successfulAuthenticationPolicy: '@Seb\AuthenticatorBundle\Security\Policies\TargetPathOrHomePageRedirect'
            $badCredentialsPolicy: '@Seb\AuthenticatorBundle\Security\Policies\RedirectOnBadCredentials'

when@test:
    services:
        test.user_password_hasher:
            alias: 'security.user_password_hasher'
            public: true
